INTRODUCTION

Pattern searching is an important problem in computer science. When we do search for a string in notepad/word file or browser or
database, pattern searching algorithms are used to show the search results.

KMP (Knuth Morris Pratt) Pattern Searching:-

The Naive pattern searching algorithm doesn’t work well in cases where we see many matching characters followed by a mismatching
character.The KMP matching algorithm uses degenerating property (pattern having same sub-patterns appearing more than once in the
pattern) of the pattern and improves the worst case complexity to O(n). The basic idea behind KMP’s algorithm is: whenever we 
detect a mismatch (after some matches), we already know some of the characters in the text of the next window. We take advantage of this 
information to avoid matching the characters that we know will anyway match. Let us consider below example to understand this.

How Does KMP algorithm does optimization over Naive.
Matching Overview
txt = "AAAAABAAABA" 
pat = "AAAA"

We compare first window of txt with pat
txt = "AAAAABAAABA" 
pat = "AAAA"  [Initial position]
We find a match. This is same as Naive String Matching.

In the next step, we compare next window of txt with pat.
txt = "AAAAABAAABA" 
pat =  "AAAA" [Pattern shifted one position]
This is where KMP does optimization over Naive. In this 
second window, we only compare fourth A of pattern
with fourth character of current window of text to decide 
whether current window matches or not. Since we know 
first three characters will anyway match, we skipped 
matching first three characters. 

Preprocessing Overview:
KMP algorithm preprocesses pat[] and constructs an auxiliary lps[] of size m (same as size of pattern) which is used to skip 
characters while matching. Name lps indicates longest proper prefix which is also suffix. A proper prefix is prefix with whole 
string not allowed. For example, prefixes of “ABC” are “”, “A”, “AB” and “ABC”. Proper prefixes are “”, “A” and “AB”. Suffixes 
of the string are “”, “C”, “BC” and “ABC”. We search for lps in sub-patterns. More clearly we focus on sub-strings of patterns 
that are either prefix and suffix. For each sub-pattern pat[0..i] where i = 0 to m-1, lps[i] stores length of the maximum 
matching proper prefix which is also a suffix of the sub-pattern pat[0..i].

       lps[i] = the longest proper prefix of pat[0..i] 
                  which is also a suffix of pat[0..i]. 
                  
SAMPLE INPUT AND OUTPUT
1. Input:-
text - ABABDABACDABABCABAB
pattern - ABABCABAB
Output - Given Pattern is found at index 10.

2. Input:-
text - AABAACAADAABAAABAA
Pattern - AABA
Output - Given Pattern is found at index 0
         Given Pattern is found at index 9
         Given Pattern is found at index 13
